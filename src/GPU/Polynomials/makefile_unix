# Tested on four different NVIDIA GPUs.

gpp=/usr/bin/g++
MPD=../Norms
CNV=../Convolutions
CUDA=/usr/local/cuda/include
CUDALIB=/usr/local/cuda/lib64
# the architecture flag for Tesla C2050
smflag=sm_20
# the architecture flag for Kepler K20C
# smflag=sm_35
# the architecture flag for Pascal P100
# smflag=sm_60
# the architecture flag for Volta V100
# smflag=sm_70

random_numbers.o:
	@-echo ">>> compiling double random number generators ..."
	$(gpp) -O3 -c -I$(MPD) $(MPD)/random_numbers.cpp

random_series.o:
	@-echo ">>> compiling double random series generators ..."
	$(gpp) -O3 -c -I$(MPD) $(CNV)/random_series.cpp

random_monomials.o:
	@-echo ">>> compiling double random monomials generators ..."
	$(gpp) -O3 -c -I$(MPD) -I$(CNV) $(CNV)/random_monomials.cpp

random_polynomials.o:
	@-echo ">>> compiling random_polynomials ..."
	$(gpp) -O3 -c -I$(MPD) -I$(CNV) random_polynomials.cpp

dbl_convolutions_host.o:
	@-echo ">>> compiling dbl_convolutions_host ..."
	$(gpp) -O3 -c -I$(CNV) $(CNV)/dbl_convolutions_host.cpp

dbl_monomials_host.o:
	@-echo ">>> compiling dbl_monomials_host ..."
	$(gpp) -O3 -c -I$(MPD) -I$(CNV) $(CNV)/dbl_monomials_host.cpp

dbl_monomials_kernels.o:
	@-echo ">>> compiling monomial kernels for doubles ..."
	nvcc -ccbin=$(gpp) -arch=$(smflag) -I$(CNV) -c \
             $(CNV)/dbl_monomials_kernels.cu

dbl_monomials_testers.o:
	@-echo ">>> compiling dbl_monomials_testers ..."
	$(gpp) -O3 -c -I$(CUDA) -I$(MPD) -I$(CNV) \
               $(CNV)/dbl_monomials_testers.cpp

dbl_polynomials_host.o:
	@-echo ">>> compiling dbl_polynomials_host ..."
	$(gpp) -O3 -c -I$(CUDA) -I$(MPD) -I$(CNV) dbl_polynomials_host.cpp

test_dbl_polynomials.o:
	@-echo ">>> compiling test_dbl_polynomials ..."
	$(gpp) -O3 -c -I$(CUDA) -I$(MPD) -I$(CNV) test_dbl_polynomials.cpp

convolution_job.o:
	@-echo ">>> compiling convolution_job ..."
	$(gpp) -O3 -c -I$(MPD) -I$(CNV) convolution_job.cpp

convolution_jobs.o:
	@-echo ">>> compiling convolution_jobs ..."
	$(gpp) -O3 -c -I$(MPD) -I$(CNV) convolution_jobs.cpp

test_convolution_jobs.o:
	@-echo ">>> compiling test_convolution_jobs ..."
	$(gpp) -O3 -c -I$(CUDA) -I$(MPD) -I$(CNV) test_convolution_jobs.cpp

test_dbl_polynomials: random_numbers.o random_series.o random_monomials.o \
                      random_polynomials.o \
                      convolution_job.o convolution_jobs.o \
                      dbl_convolutions_host.o dbl_monomials_host.o \
                      dbl_polynomials_host.o test_dbl_polynomials.o
	@-echo ">>> linking ..."
	$(gpp) -o test_dbl_polynomials test_dbl_polynomials.o \
                  random_numbers.o random_series.o random_monomials.o \
                  random_polynomials.o \
                  convolution_job.o convolution_jobs.o \
                  dbl_convolutions_host.o dbl_monomials_host.o \
                  dbl_polynomials_host.o \
               -lcuda -lcudart -L$(CUDALIB)

test_convolution_jobs: random_numbers.o random_series.o random_monomials.o \
                       random_polynomials.o convolution_job.o \
                       convolution_jobs.o test_convolution_jobs.o
	@-echo ">>> linking ..."
	$(gpp) -o test_convolution_jobs test_convolution_jobs.o \
                  random_numbers.o random_series.o random_monomials.o \
                  random_polynomials.o convolution_job.o convolution_jobs.o

clean:
	/bin/rm -f -r test_dbl_polynomials.o test_dbl_polynomials
	/bin/rm -f -r random_polynomials.o dbl_polynomials_host.o
	/bin/rm -f -r convolution_job.o convolution_jobs.o
	/bin/rm -f -r test_convolution_jobs test_convolution_jobs.o

cleanall: clean
	/bin/rm -f -r random_numbers.o random_series.o random_monomials.o
	/bin/rm -f -r dbl_convolutions_host.o dbl_monomials_host.o
	/bin/rm -f -r dbl_convolutions_kernels.o dbl_monomials_kernels.o
	/bin/rm -f -r dbl_monomials_testers.o
